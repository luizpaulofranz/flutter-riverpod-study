import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:riverpod_annotation/riverpod_annotation.dart';
import 'package:riverpod_files/models/product.dart';

// Notifier Providers
// use when you need to update the state & notify consumers

part 'generated_cart_provider.g.dart';

// this is a generated notifier provider, we need the part above, the @riverpod annotation and the extend following this pattern of _$ plus my class name
// this does exacly the same as we have in the manual_cart_provider.dart file, but it is generated by the riverpod_annotation package
@riverpod
class GeneratedCartNotifier extends _$GeneratedCartNotifier {
  // this is the initial state
  @override
  Set<Product> build() {
    return const {
      Product(
        id: '4',
        title: 'Red Backpack',
        price: 14,
        image: 'assets/products/backpack.png',
      ),
    };
  }

  // methods to update state
  void addProduct(Product product) {
    // state is a notifier inner object its type is Set<Product> declared at the top
    // is is immutable, so we need to create a new set with the new product
    // we are using Set instead of a List because it is faster to check if an item is in the set and we only want unique items
    if (!state.contains(product)) {
      state = {...state, product};
    }
  }

  void removeProduct(Product product) {
    state = state.where((p) => p.id != product.id).toSet();
  }
}

// here's a simple example of a providers dependency, we can access providers from other providers
@riverpod
int totalPrice(Ref ref) {
  final cartProducts = ref.watch(generatedCartNotifierProvider);
  return cartProducts.fold(0, (sum, product) => sum + product.price);
}
